#!/usr/bin/env ruby

require 'rubygems'
require 'shellwords'
require 'optparse'
require 'logger'
require 'open3'
require 'bundler'
ENV['BUNDLE_GEMFILE'] = File.join(File.dirname(__FILE__), '../Gemfile')
Bundler.require(:default)

$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../lib"
require 'storyboard'

unless Storyboard.ffprobe_installed?
  puts "Storyboard requires FFmpeg 1.1. Please check the README for instructions"
  exit
end

unless Storyboard.magick_installed?
  puts "Storyboard requires Imagemagick's mogrify tool. Please check the README for instructions on how to install Imagemagick if you need them."
  exit
end

options = {:verbose => true, :types => ['pdf'], :scene_threshold => 0.4}

# think about them
options[:consolidate_frame_threshold] = 0.4
options[:max_width] = 600

LOG = Logger.new(STDOUT)
LOG.level = Logger::INFO

opts = OptionParser.new
opts.banner = "Usage: storyboard [options] videofile [output_directory]"

opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
  options[:version] = v
  LOG.level = Logger::DEBUG if v
end

opts.on("-c", "--[no-]scenes", "Detect scene changes. This increases the time it takes to generate a file.") do |v|
  options[:scenes] = v
end

opts.on("--preview [FRAMES]", Integer, "Only render the specified number (default 10) of subtitled images.", "Unless the -c flag is used, scene detection will be skipped") do |n|
  options[:preview] = n || 10
  options[:scenes] ||= false
end

opts.on("-n", "--nudge TIME", Float, "Nudge the subtitles forward or backward. TIME is the number of seconds.", "Use this with the --preview option to quickly check and adjust the subtitle timings.") do |time|
  options[:nudge] = time
end

#opts.on("--make x,y,z", Array, "Filetypes to output", '(pdf, mobi, epub)') do |types|
#  options[:types] = types
#end

opts.on("-s", "--subs FILE", "SRT subtitle file to use. Will skip extracting/downloading one.") do |s|
  options[:subs] = s
end

opts.on_tail("-h", "--help", "Show this message") do
  puts opts
  exit
end

begin opts.parse! ARGV
rescue OptionParser::InvalidOption, OptionParser::InvalidArgument => e
  puts e
  puts opts
  exit 1
end

options[:scenes] = true if options[:scenes].nil?

p options

if ARGV.size < 1
  puts "videofile required"
  puts opts.to_s
  exit 1
elsif ARGV.size == 2 && !File.directory?(File.realdirpath(ARGV.last))
  puts "outputdir #{ARGV.last} is not a directory"
  puts opts.to_s
  exit 1
elsif ARGV.size > 2
  puts "Too many arguments"
  puts opts.to_s
  exit 1
end

options[:vidpath] = File.realdirpath(ARGV.shift)
options[:write_to] = ARGV.shift || Dir.pwd

if !File.exists?(options[:vidpath])
  puts("#{options[:vidpath]} doesn't exist.")
  exit
end

filepaths = []

if File.directory?(options[:vidpath])
  LOG.info("Ignoring subtitle option because we're looking at a directory") if options[:subs]
  options[:vidpath] = File.join(options[:vidpath], '*')
  LOG.info("Reading video files in #{options[:vidpath]}")
  filepaths += Dir[File.realdirpath(options[:vidpath])]
else
  filepaths << options[:vidpath]
end

filepaths.each {|fp|
  options[:file] = fp
  runner = Storyboard.new(options)
  runner.run if runner.video_file?
}
