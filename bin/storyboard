#!/usr/bin/env ruby

require 'rubygems'
require 'shellwords'
require 'optparse'
require 'logger'
require 'open3'
require 'bundler'
ENV['BUNDLE_GEMFILE'] = File.join(File.dirname(__FILE__), '../Gemfile')
Bundler.require(:default)

require 'nokogiri'
require 'suby'
require 'rmagick'
require 'prawn'
require 'ruby-progressbar'

$LOAD_PATH.unshift "#{File.dirname(__FILE__)}/../lib"
require 'storyboard'

unless Storyboard.ffprobe_installed?
  puts "Storyboard requires that ffmpeg 1.1 and ffprobe 1.1 are installed. Please check the README for instructions"
  exit
end

options = {:scenes => true, :verbose => true, :types => ['pdf'], :scene_threshold => 0.4}

# think about them
options[:consolidate_frame_threshold] = 0.4
options[:max_width] = 600

LOG = Logger.new(STDOUT)
LOG.level = Logger::INFO

opts = OptionParser.new
opts.banner = "Usage: storyboard [options] videofile [output_directory]"

opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
  options[:version] = v
  LOG.level = Logger::DEBUG if v
end

opts.on("-c", "--[no-]scenes", "Detect scene changes. This increases the time it takes to generate a file.") do |v|
  options[:scenes] = v
end

opts.on("-ct", Float, "Scene detection threshold. 0.2 is too low, 0.8 is too high. Play with it!") do |f|
  options[:scene_threshold] = f
end

opts.on("-s", "--subs FILE", "SRT subtitle file to use. Will skip extracting/downloading one.") do |s|
  options[:subs] = s
end

opts.on("--make x,y,z", Array, "Filetypes to output", '(pdf, mobi, epub)') do |types|
  options[:types] = types
end

opts.on_tail("-h", "--help", "Show this message") do
  puts opts
  exit
end

begin opts.parse! ARGV
rescue OptionParser::InvalidOption, OptionParser::InvalidArgument => e
  puts e
  puts opts
  exit 1
end

if ARGV.size < 1
  puts "videofile required"
  puts opts.to_s
  exit 1
end

options[:file] = File.realdirpath(ARGV.shift)

output_dir = ARGV.shift || Dir.pwd
options[:basename] = File.basename(options[:file], ".*")

options[:write_to] = output_dir #File.join(output_dir,options[:basename])
options[:work_dir] = Dir.mktmpdir
Dir.mkdir(options[:write_to]) unless File.directory?(options[:write_to])
LOG.debug(options)

Storyboard.new(options)
